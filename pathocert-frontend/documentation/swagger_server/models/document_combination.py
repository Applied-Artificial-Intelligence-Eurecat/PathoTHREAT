# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.impact_combination import ImpactCombination  # noqa: F401,E501
from swagger_server.models.location_node import LocationNode  # noqa: F401,E501
from swagger_server import util


class DocumentCombination(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, document_names: str=None, location: LocationNode=None, cause: List[str]=None, source: List[str]=None, detection: List[str]=None, impact: ImpactCombination=None, contamintants: List[str]=None, symptoms: List[str]=None, mitigation: List[str]=None, monitoring: List[str]=None, restoration: List[str]=None, prevention: List[str]=None):  # noqa: E501
        """DocumentCombination - a model defined in Swagger

        :param document_names: The document_names of this DocumentCombination.  # noqa: E501
        :type document_names: str
        :param location: The location of this DocumentCombination.  # noqa: E501
        :type location: LocationNode
        :param cause: The cause of this DocumentCombination.  # noqa: E501
        :type cause: List[str]
        :param source: The source of this DocumentCombination.  # noqa: E501
        :type source: List[str]
        :param detection: The detection of this DocumentCombination.  # noqa: E501
        :type detection: List[str]
        :param impact: The impact of this DocumentCombination.  # noqa: E501
        :type impact: ImpactCombination
        :param contamintants: The contamintants of this DocumentCombination.  # noqa: E501
        :type contamintants: List[str]
        :param symptoms: The symptoms of this DocumentCombination.  # noqa: E501
        :type symptoms: List[str]
        :param mitigation: The mitigation of this DocumentCombination.  # noqa: E501
        :type mitigation: List[str]
        :param monitoring: The monitoring of this DocumentCombination.  # noqa: E501
        :type monitoring: List[str]
        :param restoration: The restoration of this DocumentCombination.  # noqa: E501
        :type restoration: List[str]
        :param prevention: The prevention of this DocumentCombination.  # noqa: E501
        :type prevention: List[str]
        """
        self.swagger_types = {
            'document_names': str,
            'location': LocationNode,
            'cause': List[str],
            'source': List[str],
            'detection': List[str],
            'impact': ImpactCombination,
            'contamintants': List[str],
            'symptoms': List[str],
            'mitigation': List[str],
            'monitoring': List[str],
            'restoration': List[str],
            'prevention': List[str]
        }

        self.attribute_map = {
            'document_names': 'documentNames',
            'location': 'location',
            'cause': 'cause',
            'source': 'source',
            'detection': 'detection',
            'impact': 'impact',
            'contamintants': 'contamintants',
            'symptoms': 'symptoms',
            'mitigation': 'mitigation',
            'monitoring': 'monitoring',
            'restoration': 'restoration',
            'prevention': 'prevention'
        }
        self._document_names = document_names
        self._location = location
        self._cause = cause
        self._source = source
        self._detection = detection
        self._impact = impact
        self._contamintants = contamintants
        self._symptoms = symptoms
        self._mitigation = mitigation
        self._monitoring = monitoring
        self._restoration = restoration
        self._prevention = prevention

    @classmethod
    def from_dict(cls, dikt) -> 'DocumentCombination':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DocumentCombination of this DocumentCombination.  # noqa: E501
        :rtype: DocumentCombination
        """
        return util.deserialize_model(dikt, cls)

    @property
    def document_names(self) -> str:
        """Gets the document_names of this DocumentCombination.


        :return: The document_names of this DocumentCombination.
        :rtype: str
        """
        return self._document_names

    @document_names.setter
    def document_names(self, document_names: str):
        """Sets the document_names of this DocumentCombination.


        :param document_names: The document_names of this DocumentCombination.
        :type document_names: str
        """

        self._document_names = document_names

    @property
    def location(self) -> LocationNode:
        """Gets the location of this DocumentCombination.


        :return: The location of this DocumentCombination.
        :rtype: LocationNode
        """
        return self._location

    @location.setter
    def location(self, location: LocationNode):
        """Sets the location of this DocumentCombination.


        :param location: The location of this DocumentCombination.
        :type location: LocationNode
        """

        self._location = location

    @property
    def cause(self) -> List[str]:
        """Gets the cause of this DocumentCombination.


        :return: The cause of this DocumentCombination.
        :rtype: List[str]
        """
        return self._cause

    @cause.setter
    def cause(self, cause: List[str]):
        """Sets the cause of this DocumentCombination.


        :param cause: The cause of this DocumentCombination.
        :type cause: List[str]
        """

        self._cause = cause

    @property
    def source(self) -> List[str]:
        """Gets the source of this DocumentCombination.


        :return: The source of this DocumentCombination.
        :rtype: List[str]
        """
        return self._source

    @source.setter
    def source(self, source: List[str]):
        """Sets the source of this DocumentCombination.


        :param source: The source of this DocumentCombination.
        :type source: List[str]
        """

        self._source = source

    @property
    def detection(self) -> List[str]:
        """Gets the detection of this DocumentCombination.


        :return: The detection of this DocumentCombination.
        :rtype: List[str]
        """
        return self._detection

    @detection.setter
    def detection(self, detection: List[str]):
        """Sets the detection of this DocumentCombination.


        :param detection: The detection of this DocumentCombination.
        :type detection: List[str]
        """

        self._detection = detection

    @property
    def impact(self) -> ImpactCombination:
        """Gets the impact of this DocumentCombination.


        :return: The impact of this DocumentCombination.
        :rtype: ImpactCombination
        """
        return self._impact

    @impact.setter
    def impact(self, impact: ImpactCombination):
        """Sets the impact of this DocumentCombination.


        :param impact: The impact of this DocumentCombination.
        :type impact: ImpactCombination
        """

        self._impact = impact

    @property
    def contamintants(self) -> List[str]:
        """Gets the contamintants of this DocumentCombination.


        :return: The contamintants of this DocumentCombination.
        :rtype: List[str]
        """
        return self._contamintants

    @contamintants.setter
    def contamintants(self, contamintants: List[str]):
        """Sets the contamintants of this DocumentCombination.


        :param contamintants: The contamintants of this DocumentCombination.
        :type contamintants: List[str]
        """

        self._contamintants = contamintants

    @property
    def symptoms(self) -> List[str]:
        """Gets the symptoms of this DocumentCombination.


        :return: The symptoms of this DocumentCombination.
        :rtype: List[str]
        """
        return self._symptoms

    @symptoms.setter
    def symptoms(self, symptoms: List[str]):
        """Sets the symptoms of this DocumentCombination.


        :param symptoms: The symptoms of this DocumentCombination.
        :type symptoms: List[str]
        """

        self._symptoms = symptoms

    @property
    def mitigation(self) -> List[str]:
        """Gets the mitigation of this DocumentCombination.


        :return: The mitigation of this DocumentCombination.
        :rtype: List[str]
        """
        return self._mitigation

    @mitigation.setter
    def mitigation(self, mitigation: List[str]):
        """Sets the mitigation of this DocumentCombination.


        :param mitigation: The mitigation of this DocumentCombination.
        :type mitigation: List[str]
        """

        self._mitigation = mitigation

    @property
    def monitoring(self) -> List[str]:
        """Gets the monitoring of this DocumentCombination.


        :return: The monitoring of this DocumentCombination.
        :rtype: List[str]
        """
        return self._monitoring

    @monitoring.setter
    def monitoring(self, monitoring: List[str]):
        """Sets the monitoring of this DocumentCombination.


        :param monitoring: The monitoring of this DocumentCombination.
        :type monitoring: List[str]
        """

        self._monitoring = monitoring

    @property
    def restoration(self) -> List[str]:
        """Gets the restoration of this DocumentCombination.


        :return: The restoration of this DocumentCombination.
        :rtype: List[str]
        """
        return self._restoration

    @restoration.setter
    def restoration(self, restoration: List[str]):
        """Sets the restoration of this DocumentCombination.


        :param restoration: The restoration of this DocumentCombination.
        :type restoration: List[str]
        """

        self._restoration = restoration

    @property
    def prevention(self) -> List[str]:
        """Gets the prevention of this DocumentCombination.


        :return: The prevention of this DocumentCombination.
        :rtype: List[str]
        """
        return self._prevention

    @prevention.setter
    def prevention(self, prevention: List[str]):
        """Sets the prevention of this DocumentCombination.


        :param prevention: The prevention of this DocumentCombination.
        :type prevention: List[str]
        """

        self._prevention = prevention
