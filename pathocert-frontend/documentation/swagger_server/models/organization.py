# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Organization(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: float=None, name: str=None, description_org: str=None, action_area: str=None):  # noqa: E501
        """Organization - a model defined in Swagger

        :param id: The id of this Organization.  # noqa: E501
        :type id: float
        :param name: The name of this Organization.  # noqa: E501
        :type name: str
        :param description_org: The description_org of this Organization.  # noqa: E501
        :type description_org: str
        :param action_area: The action_area of this Organization.  # noqa: E501
        :type action_area: str
        """
        self.swagger_types = {
            'id': float,
            'name': str,
            'description_org': str,
            'action_area': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'description_org': 'descriptionOrg',
            'action_area': 'actionArea'
        }
        self._id = id
        self._name = name
        self._description_org = description_org
        self._action_area = action_area

    @classmethod
    def from_dict(cls, dikt) -> 'Organization':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Organization of this Organization.  # noqa: E501
        :rtype: Organization
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> float:
        """Gets the id of this Organization.


        :return: The id of this Organization.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id: float):
        """Sets the id of this Organization.


        :param id: The id of this Organization.
        :type id: float
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this Organization.


        :return: The name of this Organization.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Organization.


        :param name: The name of this Organization.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description_org(self) -> str:
        """Gets the description_org of this Organization.


        :return: The description_org of this Organization.
        :rtype: str
        """
        return self._description_org

    @description_org.setter
    def description_org(self, description_org: str):
        """Sets the description_org of this Organization.


        :param description_org: The description_org of this Organization.
        :type description_org: str
        """
        if description_org is None:
            raise ValueError("Invalid value for `description_org`, must not be `None`")  # noqa: E501

        self._description_org = description_org

    @property
    def action_area(self) -> str:
        """Gets the action_area of this Organization.


        :return: The action_area of this Organization.
        :rtype: str
        """
        return self._action_area

    @action_area.setter
    def action_area(self, action_area: str):
        """Sets the action_area of this Organization.


        :param action_area: The action_area of this Organization.
        :type action_area: str
        """
        if action_area is None:
            raise ValueError("Invalid value for `action_area`, must not be `None`")  # noqa: E501

        self._action_area = action_area
