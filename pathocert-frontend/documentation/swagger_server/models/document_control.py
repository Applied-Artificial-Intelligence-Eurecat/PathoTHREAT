# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class DocumentControl(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, monitoring: List[str]=None, restoration: List[str]=None, prevention: List[str]=None):  # noqa: E501
        """DocumentControl - a model defined in Swagger

        :param monitoring: The monitoring of this DocumentControl.  # noqa: E501
        :type monitoring: List[str]
        :param restoration: The restoration of this DocumentControl.  # noqa: E501
        :type restoration: List[str]
        :param prevention: The prevention of this DocumentControl.  # noqa: E501
        :type prevention: List[str]
        """
        self.swagger_types = {
            'monitoring': List[str],
            'restoration': List[str],
            'prevention': List[str]
        }

        self.attribute_map = {
            'monitoring': 'monitoring',
            'restoration': 'restoration',
            'prevention': 'prevention'
        }
        self._monitoring = monitoring
        self._restoration = restoration
        self._prevention = prevention

    @classmethod
    def from_dict(cls, dikt) -> 'DocumentControl':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DocumentControl of this DocumentControl.  # noqa: E501
        :rtype: DocumentControl
        """
        return util.deserialize_model(dikt, cls)

    @property
    def monitoring(self) -> List[str]:
        """Gets the monitoring of this DocumentControl.


        :return: The monitoring of this DocumentControl.
        :rtype: List[str]
        """
        return self._monitoring

    @monitoring.setter
    def monitoring(self, monitoring: List[str]):
        """Sets the monitoring of this DocumentControl.


        :param monitoring: The monitoring of this DocumentControl.
        :type monitoring: List[str]
        """

        self._monitoring = monitoring

    @property
    def restoration(self) -> List[str]:
        """Gets the restoration of this DocumentControl.


        :return: The restoration of this DocumentControl.
        :rtype: List[str]
        """
        return self._restoration

    @restoration.setter
    def restoration(self, restoration: List[str]):
        """Sets the restoration of this DocumentControl.


        :param restoration: The restoration of this DocumentControl.
        :type restoration: List[str]
        """

        self._restoration = restoration

    @property
    def prevention(self) -> List[str]:
        """Gets the prevention of this DocumentControl.


        :return: The prevention of this DocumentControl.
        :rtype: List[str]
        """
        return self._prevention

    @prevention.setter
    def prevention(self, prevention: List[str]):
        """Sets the prevention of this DocumentControl.


        :param prevention: The prevention of this DocumentControl.
        :type prevention: List[str]
        """

        self._prevention = prevention
