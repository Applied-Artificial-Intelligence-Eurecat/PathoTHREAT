# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class LocationNode(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, city: str=None, region: str=None, country: str=None):  # noqa: E501
        """LocationNode - a model defined in Swagger

        :param city: The city of this LocationNode.  # noqa: E501
        :type city: str
        :param region: The region of this LocationNode.  # noqa: E501
        :type region: str
        :param country: The country of this LocationNode.  # noqa: E501
        :type country: str
        """
        self.swagger_types = {
            'city': str,
            'region': str,
            'country': str
        }

        self.attribute_map = {
            'city': 'city',
            'region': 'region',
            'country': 'country'
        }
        self._city = city
        self._region = region
        self._country = country

    @classmethod
    def from_dict(cls, dikt) -> 'LocationNode':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The LocationNode of this LocationNode.  # noqa: E501
        :rtype: LocationNode
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city(self) -> str:
        """Gets the city of this LocationNode.


        :return: The city of this LocationNode.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city: str):
        """Sets the city of this LocationNode.


        :param city: The city of this LocationNode.
        :type city: str
        """

        self._city = city

    @property
    def region(self) -> str:
        """Gets the region of this LocationNode.


        :return: The region of this LocationNode.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region: str):
        """Sets the region of this LocationNode.


        :param region: The region of this LocationNode.
        :type region: str
        """

        self._region = region

    @property
    def country(self) -> str:
        """Gets the country of this LocationNode.


        :return: The country of this LocationNode.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country: str):
        """Sets the country of this LocationNode.


        :param country: The country of this LocationNode.
        :type country: str
        """

        self._country = country
