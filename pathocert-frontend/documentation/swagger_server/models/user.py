# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.organization import Organization  # noqa: F401,E501
from swagger_server import util


class User(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: float=None, username: str=None, user_role: str=None, registration_date: float=None, organization: Organization=None):  # noqa: E501
        """User - a model defined in Swagger

        :param id: The id of this User.  # noqa: E501
        :type id: float
        :param username: The username of this User.  # noqa: E501
        :type username: str
        :param user_role: The user_role of this User.  # noqa: E501
        :type user_role: str
        :param registration_date: The registration_date of this User.  # noqa: E501
        :type registration_date: float
        :param organization: The organization of this User.  # noqa: E501
        :type organization: Organization
        """
        self.swagger_types = {
            'id': float,
            'username': str,
            'user_role': str,
            'registration_date': float,
            'organization': Organization
        }

        self.attribute_map = {
            'id': 'id',
            'username': 'username',
            'user_role': 'userRole',
            'registration_date': 'registrationDate',
            'organization': 'organization'
        }
        self._id = id
        self._username = username
        self._user_role = user_role
        self._registration_date = registration_date
        self._organization = organization

    @classmethod
    def from_dict(cls, dikt) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The User of this User.  # noqa: E501
        :rtype: User
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> float:
        """Gets the id of this User.


        :return: The id of this User.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id: float):
        """Sets the id of this User.


        :param id: The id of this User.
        :type id: float
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def username(self) -> str:
        """Gets the username of this User.


        :return: The username of this User.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this User.


        :param username: The username of this User.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def user_role(self) -> str:
        """Gets the user_role of this User.


        :return: The user_role of this User.
        :rtype: str
        """
        return self._user_role

    @user_role.setter
    def user_role(self, user_role: str):
        """Sets the user_role of this User.


        :param user_role: The user_role of this User.
        :type user_role: str
        """
        if user_role is None:
            raise ValueError("Invalid value for `user_role`, must not be `None`")  # noqa: E501

        self._user_role = user_role

    @property
    def registration_date(self) -> float:
        """Gets the registration_date of this User.


        :return: The registration_date of this User.
        :rtype: float
        """
        return self._registration_date

    @registration_date.setter
    def registration_date(self, registration_date: float):
        """Sets the registration_date of this User.


        :param registration_date: The registration_date of this User.
        :type registration_date: float
        """
        if registration_date is None:
            raise ValueError("Invalid value for `registration_date`, must not be `None`")  # noqa: E501

        self._registration_date = registration_date

    @property
    def organization(self) -> Organization:
        """Gets the organization of this User.


        :return: The organization of this User.
        :rtype: Organization
        """
        return self._organization

    @organization.setter
    def organization(self, organization: Organization):
        """Sets the organization of this User.


        :param organization: The organization of this User.
        :type organization: Organization
        """
        if organization is None:
            raise ValueError("Invalid value for `organization`, must not be `None`")  # noqa: E501

        self._organization = organization
