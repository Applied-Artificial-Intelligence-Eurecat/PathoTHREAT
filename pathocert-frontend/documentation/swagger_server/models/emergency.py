# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.document_similarity import DocumentSimilarity  # noqa: F401,E501
from swagger_server.models.emergency_links import EmergencyLinks  # noqa: F401,E501
from swagger_server.models.organization import Organization  # noqa: F401,E501
from swagger_server import util


class Emergency(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: float=None, report_date: float=None, reporting_organization: Organization=None, reporting_user_id: float=None, name_reporter: str=None, emergency_type: str=None, emergency_description: str=None, severity_level: float=None, name_area_affected: str=None, affected_area_type: str=None, ocupation_description: str=None, risk_assessment: str=None, action_plan: str=None, archived: bool=None, symptoms: List[str]=None, contaminants: List[str]=None, detections: List[str]=None, similarity_list: List[DocumentSimilarity]=None, impact: str=None, control: str=None, links: EmergencyLinks=None):  # noqa: E501
        """Emergency - a model defined in Swagger

        :param id: The id of this Emergency.  # noqa: E501
        :type id: float
        :param report_date: The report_date of this Emergency.  # noqa: E501
        :type report_date: float
        :param reporting_organization: The reporting_organization of this Emergency.  # noqa: E501
        :type reporting_organization: Organization
        :param reporting_user_id: The reporting_user_id of this Emergency.  # noqa: E501
        :type reporting_user_id: float
        :param name_reporter: The name_reporter of this Emergency.  # noqa: E501
        :type name_reporter: str
        :param emergency_type: The emergency_type of this Emergency.  # noqa: E501
        :type emergency_type: str
        :param emergency_description: The emergency_description of this Emergency.  # noqa: E501
        :type emergency_description: str
        :param severity_level: The severity_level of this Emergency.  # noqa: E501
        :type severity_level: float
        :param name_area_affected: The name_area_affected of this Emergency.  # noqa: E501
        :type name_area_affected: str
        :param affected_area_type: The affected_area_type of this Emergency.  # noqa: E501
        :type affected_area_type: str
        :param ocupation_description: The ocupation_description of this Emergency.  # noqa: E501
        :type ocupation_description: str
        :param risk_assessment: The risk_assessment of this Emergency.  # noqa: E501
        :type risk_assessment: str
        :param action_plan: The action_plan of this Emergency.  # noqa: E501
        :type action_plan: str
        :param archived: The archived of this Emergency.  # noqa: E501
        :type archived: bool
        :param symptoms: The symptoms of this Emergency.  # noqa: E501
        :type symptoms: List[str]
        :param contaminants: The contaminants of this Emergency.  # noqa: E501
        :type contaminants: List[str]
        :param detections: The detections of this Emergency.  # noqa: E501
        :type detections: List[str]
        :param similarity_list: The similarity_list of this Emergency.  # noqa: E501
        :type similarity_list: List[DocumentSimilarity]
        :param impact: The impact of this Emergency.  # noqa: E501
        :type impact: str
        :param control: The control of this Emergency.  # noqa: E501
        :type control: str
        :param links: The links of this Emergency.  # noqa: E501
        :type links: EmergencyLinks
        """
        self.swagger_types = {
            'id': float,
            'report_date': float,
            'reporting_organization': Organization,
            'reporting_user_id': float,
            'name_reporter': str,
            'emergency_type': str,
            'emergency_description': str,
            'severity_level': float,
            'name_area_affected': str,
            'affected_area_type': str,
            'ocupation_description': str,
            'risk_assessment': str,
            'action_plan': str,
            'archived': bool,
            'symptoms': List[str],
            'contaminants': List[str],
            'detections': List[str],
            'similarity_list': List[DocumentSimilarity],
            'impact': str,
            'control': str,
            'links': EmergencyLinks
        }

        self.attribute_map = {
            'id': 'id',
            'report_date': 'reportDate',
            'reporting_organization': 'reportingOrganization',
            'reporting_user_id': 'reportingUserId',
            'name_reporter': 'nameReporter',
            'emergency_type': 'emergencyType',
            'emergency_description': 'emergencyDescription',
            'severity_level': 'severityLevel',
            'name_area_affected': 'nameAreaAffected',
            'affected_area_type': 'affectedAreaType',
            'ocupation_description': 'ocupationDescription',
            'risk_assessment': 'riskAssessment',
            'action_plan': 'actionPlan',
            'archived': 'archived',
            'symptoms': 'symptoms',
            'contaminants': 'contaminants',
            'detections': 'detections',
            'similarity_list': 'similarityList',
            'impact': 'impact',
            'control': 'control',
            'links': '_links'
        }
        self._id = id
        self._report_date = report_date
        self._reporting_organization = reporting_organization
        self._reporting_user_id = reporting_user_id
        self._name_reporter = name_reporter
        self._emergency_type = emergency_type
        self._emergency_description = emergency_description
        self._severity_level = severity_level
        self._name_area_affected = name_area_affected
        self._affected_area_type = affected_area_type
        self._ocupation_description = ocupation_description
        self._risk_assessment = risk_assessment
        self._action_plan = action_plan
        self._archived = archived
        self._symptoms = symptoms
        self._contaminants = contaminants
        self._detections = detections
        self._similarity_list = similarity_list
        self._impact = impact
        self._control = control
        self._links = links

    @classmethod
    def from_dict(cls, dikt) -> 'Emergency':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Emergency of this Emergency.  # noqa: E501
        :rtype: Emergency
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> float:
        """Gets the id of this Emergency.


        :return: The id of this Emergency.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id: float):
        """Sets the id of this Emergency.


        :param id: The id of this Emergency.
        :type id: float
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def report_date(self) -> float:
        """Gets the report_date of this Emergency.


        :return: The report_date of this Emergency.
        :rtype: float
        """
        return self._report_date

    @report_date.setter
    def report_date(self, report_date: float):
        """Sets the report_date of this Emergency.


        :param report_date: The report_date of this Emergency.
        :type report_date: float
        """
        if report_date is None:
            raise ValueError("Invalid value for `report_date`, must not be `None`")  # noqa: E501

        self._report_date = report_date

    @property
    def reporting_organization(self) -> Organization:
        """Gets the reporting_organization of this Emergency.


        :return: The reporting_organization of this Emergency.
        :rtype: Organization
        """
        return self._reporting_organization

    @reporting_organization.setter
    def reporting_organization(self, reporting_organization: Organization):
        """Sets the reporting_organization of this Emergency.


        :param reporting_organization: The reporting_organization of this Emergency.
        :type reporting_organization: Organization
        """
        if reporting_organization is None:
            raise ValueError("Invalid value for `reporting_organization`, must not be `None`")  # noqa: E501

        self._reporting_organization = reporting_organization

    @property
    def reporting_user_id(self) -> float:
        """Gets the reporting_user_id of this Emergency.


        :return: The reporting_user_id of this Emergency.
        :rtype: float
        """
        return self._reporting_user_id

    @reporting_user_id.setter
    def reporting_user_id(self, reporting_user_id: float):
        """Sets the reporting_user_id of this Emergency.


        :param reporting_user_id: The reporting_user_id of this Emergency.
        :type reporting_user_id: float
        """
        if reporting_user_id is None:
            raise ValueError("Invalid value for `reporting_user_id`, must not be `None`")  # noqa: E501

        self._reporting_user_id = reporting_user_id

    @property
    def name_reporter(self) -> str:
        """Gets the name_reporter of this Emergency.


        :return: The name_reporter of this Emergency.
        :rtype: str
        """
        return self._name_reporter

    @name_reporter.setter
    def name_reporter(self, name_reporter: str):
        """Sets the name_reporter of this Emergency.


        :param name_reporter: The name_reporter of this Emergency.
        :type name_reporter: str
        """

        self._name_reporter = name_reporter

    @property
    def emergency_type(self) -> str:
        """Gets the emergency_type of this Emergency.


        :return: The emergency_type of this Emergency.
        :rtype: str
        """
        return self._emergency_type

    @emergency_type.setter
    def emergency_type(self, emergency_type: str):
        """Sets the emergency_type of this Emergency.


        :param emergency_type: The emergency_type of this Emergency.
        :type emergency_type: str
        """

        self._emergency_type = emergency_type

    @property
    def emergency_description(self) -> str:
        """Gets the emergency_description of this Emergency.


        :return: The emergency_description of this Emergency.
        :rtype: str
        """
        return self._emergency_description

    @emergency_description.setter
    def emergency_description(self, emergency_description: str):
        """Sets the emergency_description of this Emergency.


        :param emergency_description: The emergency_description of this Emergency.
        :type emergency_description: str
        """

        self._emergency_description = emergency_description

    @property
    def severity_level(self) -> float:
        """Gets the severity_level of this Emergency.


        :return: The severity_level of this Emergency.
        :rtype: float
        """
        return self._severity_level

    @severity_level.setter
    def severity_level(self, severity_level: float):
        """Sets the severity_level of this Emergency.


        :param severity_level: The severity_level of this Emergency.
        :type severity_level: float
        """

        self._severity_level = severity_level

    @property
    def name_area_affected(self) -> str:
        """Gets the name_area_affected of this Emergency.


        :return: The name_area_affected of this Emergency.
        :rtype: str
        """
        return self._name_area_affected

    @name_area_affected.setter
    def name_area_affected(self, name_area_affected: str):
        """Sets the name_area_affected of this Emergency.


        :param name_area_affected: The name_area_affected of this Emergency.
        :type name_area_affected: str
        """

        self._name_area_affected = name_area_affected

    @property
    def affected_area_type(self) -> str:
        """Gets the affected_area_type of this Emergency.


        :return: The affected_area_type of this Emergency.
        :rtype: str
        """
        return self._affected_area_type

    @affected_area_type.setter
    def affected_area_type(self, affected_area_type: str):
        """Sets the affected_area_type of this Emergency.


        :param affected_area_type: The affected_area_type of this Emergency.
        :type affected_area_type: str
        """

        self._affected_area_type = affected_area_type

    @property
    def ocupation_description(self) -> str:
        """Gets the ocupation_description of this Emergency.


        :return: The ocupation_description of this Emergency.
        :rtype: str
        """
        return self._ocupation_description

    @ocupation_description.setter
    def ocupation_description(self, ocupation_description: str):
        """Sets the ocupation_description of this Emergency.


        :param ocupation_description: The ocupation_description of this Emergency.
        :type ocupation_description: str
        """

        self._ocupation_description = ocupation_description

    @property
    def risk_assessment(self) -> str:
        """Gets the risk_assessment of this Emergency.


        :return: The risk_assessment of this Emergency.
        :rtype: str
        """
        return self._risk_assessment

    @risk_assessment.setter
    def risk_assessment(self, risk_assessment: str):
        """Sets the risk_assessment of this Emergency.


        :param risk_assessment: The risk_assessment of this Emergency.
        :type risk_assessment: str
        """

        self._risk_assessment = risk_assessment

    @property
    def action_plan(self) -> str:
        """Gets the action_plan of this Emergency.


        :return: The action_plan of this Emergency.
        :rtype: str
        """
        return self._action_plan

    @action_plan.setter
    def action_plan(self, action_plan: str):
        """Sets the action_plan of this Emergency.


        :param action_plan: The action_plan of this Emergency.
        :type action_plan: str
        """

        self._action_plan = action_plan

    @property
    def archived(self) -> bool:
        """Gets the archived of this Emergency.


        :return: The archived of this Emergency.
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived: bool):
        """Sets the archived of this Emergency.


        :param archived: The archived of this Emergency.
        :type archived: bool
        """

        self._archived = archived

    @property
    def symptoms(self) -> List[str]:
        """Gets the symptoms of this Emergency.


        :return: The symptoms of this Emergency.
        :rtype: List[str]
        """
        return self._symptoms

    @symptoms.setter
    def symptoms(self, symptoms: List[str]):
        """Sets the symptoms of this Emergency.


        :param symptoms: The symptoms of this Emergency.
        :type symptoms: List[str]
        """

        self._symptoms = symptoms

    @property
    def contaminants(self) -> List[str]:
        """Gets the contaminants of this Emergency.


        :return: The contaminants of this Emergency.
        :rtype: List[str]
        """
        return self._contaminants

    @contaminants.setter
    def contaminants(self, contaminants: List[str]):
        """Sets the contaminants of this Emergency.


        :param contaminants: The contaminants of this Emergency.
        :type contaminants: List[str]
        """

        self._contaminants = contaminants

    @property
    def detections(self) -> List[str]:
        """Gets the detections of this Emergency.


        :return: The detections of this Emergency.
        :rtype: List[str]
        """
        return self._detections

    @detections.setter
    def detections(self, detections: List[str]):
        """Sets the detections of this Emergency.


        :param detections: The detections of this Emergency.
        :type detections: List[str]
        """

        self._detections = detections

    @property
    def similarity_list(self) -> List[DocumentSimilarity]:
        """Gets the similarity_list of this Emergency.


        :return: The similarity_list of this Emergency.
        :rtype: List[DocumentSimilarity]
        """
        return self._similarity_list

    @similarity_list.setter
    def similarity_list(self, similarity_list: List[DocumentSimilarity]):
        """Sets the similarity_list of this Emergency.


        :param similarity_list: The similarity_list of this Emergency.
        :type similarity_list: List[DocumentSimilarity]
        """

        self._similarity_list = similarity_list

    @property
    def impact(self) -> str:
        """Gets the impact of this Emergency.


        :return: The impact of this Emergency.
        :rtype: str
        """
        return self._impact

    @impact.setter
    def impact(self, impact: str):
        """Sets the impact of this Emergency.


        :param impact: The impact of this Emergency.
        :type impact: str
        """

        self._impact = impact

    @property
    def control(self) -> str:
        """Gets the control of this Emergency.


        :return: The control of this Emergency.
        :rtype: str
        """
        return self._control

    @control.setter
    def control(self, control: str):
        """Sets the control of this Emergency.


        :param control: The control of this Emergency.
        :type control: str
        """

        self._control = control

    @property
    def links(self) -> EmergencyLinks:
        """Gets the links of this Emergency.


        :return: The links of this Emergency.
        :rtype: EmergencyLinks
        """
        return self._links

    @links.setter
    def links(self, links: EmergencyLinks):
        """Sets the links of this Emergency.


        :param links: The links of this Emergency.
        :type links: EmergencyLinks
        """

        self._links = links
