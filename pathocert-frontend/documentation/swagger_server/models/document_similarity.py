# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.document import Document  # noqa: F401,E501
from swagger_server.models.document_control import DocumentControl  # noqa: F401,E501
from swagger_server.models.document_impact import DocumentImpact  # noqa: F401,E501
from swagger_server import util


class DocumentSimilarity(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, document: Document=None, similarity: float=None, impact: DocumentImpact=None, control: DocumentControl=None):  # noqa: E501
        """DocumentSimilarity - a model defined in Swagger

        :param document: The document of this DocumentSimilarity.  # noqa: E501
        :type document: Document
        :param similarity: The similarity of this DocumentSimilarity.  # noqa: E501
        :type similarity: float
        :param impact: The impact of this DocumentSimilarity.  # noqa: E501
        :type impact: DocumentImpact
        :param control: The control of this DocumentSimilarity.  # noqa: E501
        :type control: DocumentControl
        """
        self.swagger_types = {
            'document': Document,
            'similarity': float,
            'impact': DocumentImpact,
            'control': DocumentControl
        }

        self.attribute_map = {
            'document': 'document',
            'similarity': 'similarity',
            'impact': 'impact',
            'control': 'control'
        }
        self._document = document
        self._similarity = similarity
        self._impact = impact
        self._control = control

    @classmethod
    def from_dict(cls, dikt) -> 'DocumentSimilarity':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DocumentSimilarity of this DocumentSimilarity.  # noqa: E501
        :rtype: DocumentSimilarity
        """
        return util.deserialize_model(dikt, cls)

    @property
    def document(self) -> Document:
        """Gets the document of this DocumentSimilarity.


        :return: The document of this DocumentSimilarity.
        :rtype: Document
        """
        return self._document

    @document.setter
    def document(self, document: Document):
        """Sets the document of this DocumentSimilarity.


        :param document: The document of this DocumentSimilarity.
        :type document: Document
        """
        if document is None:
            raise ValueError("Invalid value for `document`, must not be `None`")  # noqa: E501

        self._document = document

    @property
    def similarity(self) -> float:
        """Gets the similarity of this DocumentSimilarity.


        :return: The similarity of this DocumentSimilarity.
        :rtype: float
        """
        return self._similarity

    @similarity.setter
    def similarity(self, similarity: float):
        """Sets the similarity of this DocumentSimilarity.


        :param similarity: The similarity of this DocumentSimilarity.
        :type similarity: float
        """
        if similarity is None:
            raise ValueError("Invalid value for `similarity`, must not be `None`")  # noqa: E501

        self._similarity = similarity

    @property
    def impact(self) -> DocumentImpact:
        """Gets the impact of this DocumentSimilarity.


        :return: The impact of this DocumentSimilarity.
        :rtype: DocumentImpact
        """
        return self._impact

    @impact.setter
    def impact(self, impact: DocumentImpact):
        """Sets the impact of this DocumentSimilarity.


        :param impact: The impact of this DocumentSimilarity.
        :type impact: DocumentImpact
        """

        self._impact = impact

    @property
    def control(self) -> DocumentControl:
        """Gets the control of this DocumentSimilarity.


        :return: The control of this DocumentSimilarity.
        :rtype: DocumentControl
        """
        return self._control

    @control.setter
    def control(self, control: DocumentControl):
        """Sets the control of this DocumentSimilarity.


        :param control: The control of this DocumentSimilarity.
        :type control: DocumentControl
        """

        self._control = control
